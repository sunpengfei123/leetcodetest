/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    HashMap<TreeNode,List<TreeNode>> hm = new HashMap<TreeNode,List<TreeNode>>();
    HashSet<TreeNode> hs = new HashSet<TreeNode>();
    LinkedList<TreeNode> ll = new LinkedList<TreeNode>();
    TreeNode target = null;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        this.target = target;
        dfs(root);
        int kk = k;
        while(kk>0 && ll.size()>0){
            LinkedList<TreeNode> l2 = new LinkedList<TreeNode>();
            for(TreeNode t:ll){
                if(!hm.containsKey(t)){
                    continue;
                }
                for(TreeNode tt:hm.get(t)){
                    if(!hs.contains(tt)){
                        hs.add(tt);
                        l2.addLast(tt);
                    }
                }
            }
            kk--;
            ll = l2;
        }
        List<Integer> re = new ArrayList<Integer>();
        while(!ll.isEmpty()){
            re.add(ll.removeFirst().val);
        }
        return re;
    }

    public void dfs(TreeNode root){
        if(root == null){
            return;
        }
        if(root == target){
            ll.addLast(root);
            hs.add(root);
        }
        if(root.left != null){
            List<TreeNode> l1 = hm.getOrDefault(root,new ArrayList<TreeNode>());
            l1.add(root.left);
            hm.put(root,l1);
            l1 = hm.getOrDefault(root.left,new ArrayList<TreeNode>());
            l1.add(root);
            hm.put(root.left,l1);
            dfs(root.left);
        }
        if(root.right != null){
            List<TreeNode> l1 = hm.getOrDefault(root,new ArrayList<TreeNode>());
            l1.add(root.right);
            hm.put(root,l1);
            l1 = hm.getOrDefault(root.right,new ArrayList<TreeNode>());
            l1.add(root);
            hm.put(root.right,l1);
            dfs(root.right);
        }
    }
}
