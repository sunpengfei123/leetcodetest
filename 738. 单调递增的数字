class Solution {
public:
    int weishu(int n){
        int t = 1;
        while(n/10 != 0){
            t++;
            n = n/10;
        }
        return t;
    } 

    int he(int* h,int n){
        int re = 0;
        for(int i=0; i<n; i++){
            re+=h[i]*pow(10,n-1-i);
        }
        return re;
    }

    int monotoneIncreasingDigits(int N) {
        if(N<10){
            return N;
        }
        int n = weishu(N)-1;
        int re[n+1];
        re[0] = N/pow(10,n);
        int i = 1;
        int f = 0;
        while(i<=n){
            int t = ((int)(N/pow(10,n-i)))%10;

            if(f == 1){
                re[i] = 9;
                i++;
                continue;
            }

            if(t<re[i-1]){
                f = 1;
                int x = 2;

                while(i-x >= 0){
                    if(re[i-x] != re[i-1]){
                        break;
                    }else{
                        x++;
                    }
                }
                i = i-x+1;
                re[i]--;
            }else{
                re[i] = t;
            }
            i++;
        }

        f = 0;
        int m = 0;
        for(i = 0; i<=n; i++){
            m+=re[i]*pow(10,n-i);
        }

        return m;
    }
};
