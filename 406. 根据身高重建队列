class Solution {
    public int[][] reconstructQueue(int[][] people) {

        HashMap<Integer,List<Integer>> hm = new HashMap<Integer,List<Integer>>();
        List<Integer> shu = new ArrayList<Integer>();

        int[][] re = new int[people.length][2];

        if(people.length == 0 || people[0].length == 0) return people;

        for(int i = 0 ;i<people.length; i++){
            for(int j = 0;j<people.length-i-1;j++){
                if(people[j][0] > people[j+1][0] || (people[j][0] == people[j+1][0] && people[j][1] > people[j+1][1])){
                    int[] t = people[j];
                    people[j] = people[j+1];
                    people[j+1] = t;
                }
            }
        }

        for(int i = 0 ;i<people.length; i++){
            if(!hm.containsKey(people[i][0])){
                ArrayList<Integer> l = new ArrayList<Integer>();
                l.add(people[i][1]);
                hm.put(people[i][0],l);
                shu.add(people[i][0]);
            }else{
                hm.get(people[i][0]).add(people[i][1]);
            }
        }
        int[] shusort = new int[shu.size()];
        for(int i = 0; i<shu.size(); i++){
            shusort[i] = shu.get(i);
        }

        //Arrays.sort(shusort);

        
        int[] zhan = new int[people.length];

        for(int i = 0; i<shu.size(); i++){
            int ll = hm.get(shusort[i]).size();
            for(int j = 0; j<ll; j++){
                int t = hm.get(shusort[i]).get(j);
                int x = ff(t-j,zhan);
                re[x] = new int[]{shusort[i],t};
                zhan[x] = 1;
            }
        }
        return re;

    }

    public int ff(int n,int[] zhan){
        int m = 0;
        for(int i = 0; i<zhan.length; i++){
            if(zhan[i] == 0){
                m++;
            }
            if(m == n+1)return i;
        }

        return -1;
    }
}
