/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node,Node> hs = new HashMap<Node,Node>();
        Node h1 = head;
        Node h2 = null;
        Node cur1 = head;
        Node cur2 = null;
        Node pre = null;
        while(cur1!=null){
            if(cur1 == head){
                h2 = new Node(h1.val);
                cur2 = h2;
                hs.put(cur1,cur2);
            }else{
                cur2 = new Node(cur1.val);
                hs.put(cur1,cur2);
                pre.next = cur2;
            }
            cur1 = cur1.next;
            pre = cur2;
            cur2 = pre.next;
        }
        cur1 = h1;
        cur2 = h2;
        while(cur1!=null){
            cur2.random = hs.get(cur1.random);
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        return h2;
    }
}
