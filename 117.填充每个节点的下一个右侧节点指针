/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {

        if(root == null){
            return null;
        }

        if(root.left != null){
            if(root.right != null){
                root.left.next = root.right;
            }else if(root.next != null){
                Node t = root.next;
                while(t != null){
                    if(t.left != null){
                        root.left.next = t.left;
                        break;
                    }else if(t.right != null){
                        root.left.next = t.right;
                        break;
                    }
                    t = t.next;
                }
            }
        }

        if(root.right != null){
            if(root.next != null){
                Node t = root.next;
                while(t != null){
                    if(t.left != null){
                        root.right.next = t.left;
                        break;
                    }else if(t.right != null){
                        root.right.next = t.right;
                        break;
                    }
                    t = t.next;
                }
            }
        }

        connect(root.right);
        connect(root.left);
        
        
        return root;
    }
}
