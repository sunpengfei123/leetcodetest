class Solution {
    public int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {
        int m = profit.length;
        int MOD = (int)1e9 + 7;
        int[][][] d = new int[m+1][n+1][minProfit+1];
        d[0][0][0] = 1;
        for(int i = 1; i<= m; i++){
            for(int j = 0; j<= n; j++){
                for(int k = 0; k<=minProfit; k++){
                    if(j < group[i-1]){
                        d[i][j][k] = d[i-1][j][k];
                    }else{
                        d[i][j][k] = (d[i-1][j][k] + d[i-1][j-group[i-1]][Math.max(0, k - profit[i-1])]) % MOD;
                    }
                }
                
            }
        }
        int sum = 0;
        for(int i = 0; i<= n; i++){
            sum = (sum + d[m][i][minProfit]) % MOD;
        }

        return sum;
    }
}
