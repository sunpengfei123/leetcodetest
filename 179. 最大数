class Solution {
    public String largestNumber(int[] nums) {
        Integer[] test = new Integer[nums.length];
        int ge = 0;
        for(int i=0; i<nums.length; i++){
            test[i] = nums[i];
            if(nums[i] == 0)ge++;
        }
        if(ge == nums.length) return "0";
        Arrays.sort(test, new Comparator<Integer>(){
            public int bijiao(int o1, int o2){
                int l1 = 1;
                int l2 = 1;
                while(o1/Math.pow(10,l1) >= 1){
                    l1++;
                }
                while(o2/Math.pow(10,l2) >= 1){
                    l2++;
                }
                // if(l1 > l2){
                //     o2*=Math.pow(10,l1-l2);
                //     int i = 0;
                //     while(i<l1-l2){
                //         o2+=((int)(o2/Math.pow(10,l1-1)))*Math.pow(10,i);
                //         i++;
                //     }
                // }else{
                //     o1*=Math.pow(10,l2-l1);
                //     int i = 0;
                //     while(i<l2-l1){
                //         o1+=((int)(o1/Math.pow(10,l2-1)))*Math.pow(10,i);
                //         i++;
                //     }
                // }
                long l12 = (long)(o1*Math.pow(10,l2)+o2);
                long l21 = (long)(o2*Math.pow(10,l1)+o1);

                return l12>l21?-1:1;
            }

            public int compare(Integer o1, Integer o2){
                return bijiao(o1,o2);
                // return o1-o2;
            }
        });

        StringBuffer sb = new StringBuffer();
        for(Integer i:test){
            sb.append(i);
        }
        return sb.toString();

    }
}
